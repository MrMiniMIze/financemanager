import { useEffect, useMemo, useRef, useState, type ChangeEvent, type FormEvent } from 'react';

import { Card, CardBody, CardHeader } from '@components/dashboard/card';
import { useLocalization } from '@features/i18n';

import styles from './settings-section.module.css';
import controls from '../../styles/controls.module.css';
import patterns from '../../styles/patterns.module.css';

type TimeoutHandle = ReturnType<typeof setTimeout>;

type ProfileFormState = {
  fullName: string;
  email: string;
  phone: string;
  timeZone: string;
  language: string;
  currency: string;
};

type LinkedAccountStatus = 'connected' | 'syncing' | 'error';

type LinkedAccount = {
  id: string;
  name: string;
  institution: string;
  mask: string;
  type: 'checking' | 'savings' | 'credit';
  status: LinkedAccountStatus;
  lastSyncedAt: string;
};

type NotificationPreference = {
  id: string;
  label: string;
  description: string;
  enabled: boolean;
  required?: boolean;
};

type SecurityControl = {
  id: string;
  label: string;
  description: string;
  enabled: boolean;
};

type ActiveSession = {
  id: string;
  device: string;
  location: string;
  lastActive: string;
  current: boolean;
};

const PROFILE_DEFAULTS: ProfileFormState = {
  fullName: 'Alex Johnson',
  email: 'alex.johnson@financemanager.app',
  phone: '+1 (555) 482-9310',
  timeZone: 'America/New_York',
  language: 'en-US',
};

const LINKED_ACCOUNT_FIXTURES: LinkedAccount[] = [
  {
    id: 'acct-001',
    name: 'Everyday Checking',
    institution: 'Plaid Bank',
    mask: '1234',
    type: 'checking',
    status: 'connected',
    lastSyncedAt: '2025-03-18T09:15:00.000Z',
  },
  {
    id: 'acct-002',
    name: 'Growth Savings',
    institution: 'Highnote Federal',
    mask: '5678',
    type: 'savings',
    status: 'connected',
    lastSyncedAt: '2025-03-18T07:51:00.000Z',
  },
  {
    id: 'acct-003',
    name: 'Travel Rewards',
    institution: 'Axis Credit',
    mask: '4242',
    type: 'credit',
    status: 'error',
    lastSyncedAt: '2025-03-17T22:05:00.000Z',
  },
];

const NOTIFICATION_FIXTURES: NotificationPreference[] = [
  {
    id: 'summary',
    label: 'Weekly performance summary',
    description: 'Digest of cash flow, budgets, and goal progress every Monday morning.',
    enabled: true,
  },
  {
    id: 'alerts',
    label: 'Real-time alerts',
    description: 'Push notifications when large or unusual transactions are detected.',
    enabled: true,
  },
  {
    id: 'budget',
    label: 'Budget variance warnings',
    description: 'Email whenever a category exceeds 90% of its allocation.',
    enabled: true,
  },
  {
    id: 'recommendations',
    label: 'AI recommendations',
    description: 'Digest of personalized savings automations and insights.',
    enabled: false,
  },
  {
    id: 'compliance',
    label: 'Security notices',
    description: 'Critical updates about account security and compliance policies.',
    enabled: true,
    required: true,
  },
];

const SECURITY_CONTROL_FIXTURES: SecurityControl[] = [
  {
    id: 'twofactor',
    label: 'Two-factor authentication',
    description:
      'Protect your account with a rotating passcode generated by your authenticator app.',
    enabled: true,
  },
  {
    id: 'biometric',
    label: 'Biometric unlock',
    description: 'Allow Face ID or Touch ID on supported devices for faster sign-ins.',
    enabled: false,
  },
  {
    id: 'loginAlerts',
    label: 'Login alerts',
    description: 'Get an alert whenever a new device signs in to your account.',
    enabled: true,
  },
];

const ACTIVE_SESSION_FIXTURES: ActiveSession[] = [
  {
    id: 'session-001',
    device: 'MacBook Pro - Safari',
    location: 'New York, USA',
    lastActive: 'Active now',
    current: true,
  },
  {
    id: 'session-002',
    device: 'iPhone 15 - Finance Manager',
    location: 'Jersey City, USA',
    lastActive: '12 minutes ago',
    current: false,
  },
  {
    id: 'session-003',
    device: 'Windows Desktop - Chrome',
    location: 'Philadelphia, USA',
    lastActive: 'Yesterday at 6:42 PM',
    current: false,
  },
];

const INSTITUTION_ROTATION = [
  'Summit Credit Union',
  'First Horizon',
  'TrustLine Savings',
  'Capital One',
];

const TIME_ZONE_OPTIONS = [
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
  'UTC',
];

const LANGUAGE_OPTIONS = [
  { code: 'en-US', label: 'English (United States)' },
  { code: 'en-GB', label: 'English (United Kingdom)' },
  { code: 'es-MX', label: 'Spanish (Mexico)' },
  { code: 'fr-CA', label: 'French (Canada)' },
];

const CURRENCY_OPTIONS = [
  { code: 'USD', label: 'US Dollar (USD)' },
  { code: 'CAD', label: 'Canadian Dollar (CAD)' },
  { code: 'GBP', label: 'British Pound (GBP)' },
  { code: 'EUR', label: 'Euro (EUR)' },
];

export interface SettingsSectionProps {
  onBackToDashboard: () => void;
}

export function SettingsSection({ onBackToDashboard }: SettingsSectionProps) {
  const { formatDate, updatePreferences } = useLocalization();
  const [profile, setProfile] = useState<ProfileFormState>(PROFILE_DEFAULTS);
  const [profileStatus, setProfileStatus] = useState<'idle' | 'saving' | 'success'>('idle');
  const profileTimerRef = useRef<TimeoutHandle | null>(null);

  const [linkedAccounts, setLinkedAccounts] = useState<LinkedAccount[]>(LINKED_ACCOUNT_FIXTURES);
  const [accountStatusMessage, setAccountStatusMessage] = useState<string | null>(null);
  const accountTimers = useRef<Record<string, TimeoutHandle>>({});
  const [institutionCursor, setInstitutionCursor] = useState(0);

  const [notificationPrefs, setNotificationPrefs] =
    useState<NotificationPreference[]>(NOTIFICATION_FIXTURES);
  const [notificationStatus, setNotificationStatus] = useState<'idle' | 'saving' | 'success'>(
    'idle',
  );
  const notificationTimerRef = useRef<TimeoutHandle | null>(null);

  const [securityControls, setSecurityControls] =
    useState<SecurityControl[]>(SECURITY_CONTROL_FIXTURES);
  const [sessions, setSessions] = useState<ActiveSession[]>(ACTIVE_SESSION_FIXTURES);
  const [securityStatus, setSecurityStatus] = useState<string | null>(null);
  const securityTimerRef = useRef<TimeoutHandle | null>(null);

  const [deletePhrase, setDeletePhrase] = useState('');
  const [deleteStatus, setDeleteStatus] = useState<'idle' | 'pending' | 'success'>('idle');
  const deleteTimerRef = useRef<TimeoutHandle | null>(null);

  useEffect(() => {
    return () => {
      if (profileTimerRef.current) {
        clearTimeout(profileTimerRef.current);
      }
      if (notificationTimerRef.current) {
        clearTimeout(notificationTimerRef.current);
      }
      if (securityTimerRef.current) {
        clearTimeout(securityTimerRef.current);
      }
      if (deleteTimerRef.current) {
        clearTimeout(deleteTimerRef.current);
      }
      Object.values(accountTimers.current).forEach((timer) => {
        clearTimeout(timer);
      });
    };
  }, []);

  const formatAccountTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    if (Number.isNaN(date.getTime())) {
      return 'Not available';
    }

    return formatDate(date, {
      dateStyle: 'medium',
      timeStyle: 'short',
    });
  };

  const hasProfileChanges = useMemo(() => {
    return (
      profile.fullName !== PROFILE_DEFAULTS.fullName ||
      profile.email !== PROFILE_DEFAULTS.email ||
      profile.phone !== PROFILE_DEFAULTS.phone ||
      profile.timeZone !== PROFILE_DEFAULTS.timeZone ||
      profile.language !== PROFILE_DEFAULTS.language ||
      profile.currency !== PROFILE_DEFAULTS.currency
    );
  }, [profile]);

  const handleProfileChange = (event: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = event.target;
    setProfile((prev) => ({ ...prev, [name]: value }));
    setProfileStatus('idle');
  };

  const handleProfileSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!hasProfileChanges) {
      setProfileStatus('success');
      return;
    }

    setProfileStatus('saving');
    if (profileTimerRef.current) {
      clearTimeout(profileTimerRef.current);
    }

    profileTimerRef.current = setTimeout(() => {
      setProfileStatus('success');
      updatePreferences({
        locale: profile.language,
        timeZone: profile.timeZone,
        currency: profile.currency,
      });
    }, 600);
  };

  const handleAccountSync = (accountId: string) => {
    setLinkedAccounts((prev) =>
      prev.map((account) =>
        account.id === accountId
          ? {
              ...account,
              status: 'syncing',
            }
          : account,
      ),
    );

    const label = linkedAccounts.find((item) => item.id === accountId)?.name ?? 'account';

    if (accountTimers.current[accountId]) {
      clearTimeout(accountTimers.current[accountId]);
    }

    accountTimers.current[accountId] = setTimeout(() => {
      setLinkedAccounts((prev) =>
        prev.map((account) =>
          account.id === accountId
            ? {
                ...account,
                status: 'connected',
                lastSyncedAt: new Date().toISOString(),
              }
            : account,
        ),
      );
      setAccountStatusMessage(`${label} was synced successfully.`);
    }, 800);
  };

  const handleAccountRemove = (accountId: string) => {
    setLinkedAccounts((prev) => prev.filter((account) => account.id !== accountId));
    const removed = linkedAccounts.find((item) => item.id === accountId);
    if (removed) {
      setAccountStatusMessage(`${removed.name} has been disconnected.`);
    }

    if (accountTimers.current[accountId]) {
      clearTimeout(accountTimers.current[accountId]);
      delete accountTimers.current[accountId];
    }
  };

  const handleAccountLink = () => {
    const provider = INSTITUTION_ROTATION[institutionCursor % INSTITUTION_ROTATION.length];
    const timestamp = new Date().toISOString();
    const newAccount: LinkedAccount = {
      id: `acct-${Math.random().toString(36).slice(2, 8)}`,
      name: `${provider} Checking`,
      institution: provider,
      mask: String(Math.floor(Math.random() * 9000) + 1000),
      type: 'checking',
      status: 'connected',
      lastSyncedAt: timestamp,
    };

    setInstitutionCursor((cursor) => cursor + 1);
    setLinkedAccounts((prev) => [newAccount, ...prev]);
    setAccountStatusMessage(`${provider} linked and ready to sync transactions.`);
  };

  const handleNotificationChange = (preferenceId: string) => {
    setNotificationPrefs((prev) =>
      prev.map((pref) =>
        pref.id === preferenceId && !pref.required
          ? {
              ...pref,
              enabled: !pref.enabled,
            }
          : pref,
      ),
    );
    setNotificationStatus('idle');
  };

  const handleNotificationSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setNotificationStatus('saving');
    if (notificationTimerRef.current) {
      clearTimeout(notificationTimerRef.current);
    }

    notificationTimerRef.current = setTimeout(() => {
      setNotificationStatus('success');
    }, 500);
  };

  const handleSecurityToggle = (controlId: string) => {
    setSecurityControls((prev) =>
      prev.map((control) =>
        control.id === controlId
          ? {
              ...control,
              enabled: !control.enabled,
            }
          : control,
      ),
    );
    setSecurityStatus('Security preferences updated.');

    if (securityTimerRef.current) {
      clearTimeout(securityTimerRef.current);
    }

    securityTimerRef.current = setTimeout(() => {
      setSecurityStatus(null);
    }, 2000);
  };

  const handleSessionEnd = (sessionId: string) => {
    setSessions((prev) => prev.filter((session) => session.id !== sessionId));
    const endedSession = sessions.find((session) => session.id === sessionId);
    if (endedSession) {
      setSecurityStatus(`${endedSession.device} session ended.`);
    }

    if (securityTimerRef.current) {
      clearTimeout(securityTimerRef.current);
    }

    securityTimerRef.current = setTimeout(() => {
      setSecurityStatus(null);
    }, 2200);
  };

  const handleResetBackupCodes = () => {
    setSecurityStatus('New backup codes generated. Check your email for details.');
    if (securityTimerRef.current) {
      clearTimeout(securityTimerRef.current);
    }
    securityTimerRef.current = setTimeout(() => {
      setSecurityStatus(null);
    }, 2500);
  };

  const handleDeleteInput = (event: ChangeEvent<HTMLInputElement>) => {
    setDeletePhrase(event.target.value);
    setDeleteStatus('idle');
  };

  const handleDeleteAccount = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (deletePhrase.trim().toUpperCase() !== 'DELETE') {
      return;
    }

    setDeleteStatus('pending');
    if (deleteTimerRef.current) {
      clearTimeout(deleteTimerRef.current);
    }

    deleteTimerRef.current = setTimeout(() => {
      setDeleteStatus('success');
    }, 800);
  };

  return (
    <section id="settings" className={styles.section} aria-labelledby="settings-heading">
      <header className={styles.sectionHeader}>
        <h1 id="settings-heading" className={styles.sectionTitle}>
          Account settings
        </h1>
        <p className={styles.sectionSubtitle}>
          Keep your personal details, connected institutions, and security controls up to date so
          insights stay aligned with your goals.
        </p>
      </header>

      <div className={`${patterns.grid} ${styles.gridTwoColumn}`}>
        <Card>
          <CardHeader title="Profile" subtitle="Update the basics other services rely on." />
          <CardBody>
            <form
              className={patterns.form}
              onSubmit={handleProfileSubmit}
              aria-describedby="profile-status"
            >
              <fieldset className={styles.fieldset}>
                <legend className={styles.legend}>Personal details</legend>
                <div className={patterns.formRow}>
                  <label className={patterns.formLabel} htmlFor="profile-name">
                    Full name
                    <input
                      id="profile-name"
                      name="fullName"
                      value={profile.fullName}
                      onChange={handleProfileChange}
                      className={patterns.input}
                      placeholder="First Last"
                      autoComplete="name"
                      required
                    />
                  </label>
                  <label className={patterns.formLabel} htmlFor="profile-email">
                    Email
                    <input
                      id="profile-email"
                      name="email"
                      type="email"
                      value={profile.email}
                      onChange={handleProfileChange}
                      className={patterns.input}
                      placeholder="name@example.com"
                      autoComplete="email"
                      required
                    />
                  </label>
                </div>
                <div className={patterns.formRow}>
                  <label className={patterns.formLabel} htmlFor="profile-phone">
                    Phone number
                    <input
                      id="profile-phone"
                      name="phone"
                      value={profile.phone}
                      onChange={handleProfileChange}
                      className={patterns.input}
                      placeholder="(555) 123-4567"
                      autoComplete="tel"
                    />
                  </label>
                  <label className={patterns.formLabel} htmlFor="profile-language">
                    Language
                    <select
                      id="profile-language"
                      name="language"
                      value={profile.language}
                      onChange={handleProfileChange}
                      className={patterns.select}
                    >
                      {LANGUAGE_OPTIONS.map((option) => (
                        <option key={option.code} value={option.code}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </label>
                </div>
                <div className={patterns.formRow}>
                  <label className={patterns.formLabel} htmlFor="profile-timezone">
                    Time zone
                    <select
                      id="profile-timezone"
                      name="timeZone"
                      value={profile.timeZone}
                      onChange={handleProfileChange}
                      className={patterns.select}
                    >
                      {TIME_ZONE_OPTIONS.map((zone) => (
                        <option key={zone} value={zone}>
                          {zone}
                        </option>
                      ))}
                    </select>
                  </label>
                  <label className={patterns.formLabel} htmlFor="profile-currency">
                    Currency
                    <select
                      id="profile-currency"
                      name="currency"
                      value={profile.currency}
                      onChange={handleProfileChange}
                      className={patterns.select}
                    >
                      {CURRENCY_OPTIONS.map((option) => (
                        <option key={option.code} value={option.code}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </label>
                </div>
              </fieldset>

              <div className={styles.formActions}>
                <button type="button" className={controls.button} onClick={onBackToDashboard}>
                  Back to dashboard
                </button>
                <button
                  type="submit"
                  className={`${controls.button} ${controls.buttonPrimary}`}
                  disabled={profileStatus === 'saving'}
                >
                  {profileStatus === 'saving' ? 'Saving...' : 'Save profile'}
                </button>
              </div>
              <p
                id="profile-status"
                role="status"
                aria-live="polite"
                className={styles.statusMessage}
              >
                {profileStatus === 'success'
                  ? 'Profile updated. Your insights will reflect the changes within the next sync cycle.'
                  : null}
              </p>
            </form>
          </CardBody>
        </Card>

        <Card>
          <CardHeader
            title="Linked institutions"
            subtitle="Manage the accounts fueling analytics and automations."
            actions={
              <button
                type="button"
                className={`${controls.button} ${controls.buttonPrimary}`}
                onClick={handleAccountLink}
              >
                Link another institution
              </button>
            }
          />
          <CardBody>
            <ul className={styles.accountList} aria-live="polite">
              {linkedAccounts.map((account) => (
                <li key={account.id} className={styles.accountListItem}>
                  <div className={styles.accountDetails}>
                    <div className={styles.accountHeading}>
                      <span className={styles.accountName}>{account.name}</span>
                      <span className={styles.accountMask}>****{account.mask}</span>
                    </div>
                    <div className={styles.accountMeta}>
                      <span className={styles.accountInstitution}>{account.institution}</span>
                      <span className={styles.accountType}>{account.type}</span>
                    </div>
                  </div>
                  <div className={styles.accountStatus} data-status={account.status}>
                    {account.status === 'syncing'
                      ? 'Syncing...'
                      : account.status === 'error'
                        ? 'Needs attention'
                        : 'Connected'}
                    <span className={styles.accountSynced}>
                      Last synced {formatAccountTimestamp(account.lastSyncedAt)}
                    </span>
                  </div>
                  <div className={styles.accountActions}>
                    <button
                      type="button"
                      className={controls.button}
                      onClick={() => handleAccountSync(account.id)}
                      disabled={account.status === 'syncing'}
                    >
                      {account.status === 'syncing' ? 'Syncing' : 'Sync now'}
                    </button>
                    <button
                      type="button"
                      className={`${controls.button} ${styles.ghostButton}`}
                      onClick={() => handleAccountRemove(account.id)}
                    >
                      Remove
                    </button>
                  </div>
                </li>
              ))}
            </ul>
            <p role="status" aria-live="polite" className={styles.statusMessage}>
              {accountStatusMessage}
            </p>
          </CardBody>
        </Card>
      </div>

      <div className={`${patterns.grid} ${styles.gridTwoColumn}`}>
        <Card>
          <CardHeader
            title="Notifications"
            subtitle="Choose how we reach you when something important happens."
          />
          <CardBody>
            <form
              className={patterns.form}
              onSubmit={handleNotificationSubmit}
              aria-describedby="notification-status"
            >
              <fieldset className={styles.fieldset}>
                <legend className={styles.legend}>Delivery preferences</legend>
                <ul className={styles.preferenceList}>
                  {notificationPrefs.map((pref) => (
                    <li key={pref.id} className={styles.preferenceItem}>
                      <div className={styles.preferenceHeader}>
                        <label className={styles.preferenceLabel} htmlFor={`pref-${pref.id}`}>
                          <input
                            id={`pref-${pref.id}`}
                            type="checkbox"
                            className={styles.checkbox}
                            checked={pref.enabled}
                            onChange={() => handleNotificationChange(pref.id)}
                            disabled={pref.required}
                          />
                          <span>{pref.label}</span>
                        </label>
                        {pref.required ? (
                          <span className={styles.requiredBadge}>Required</span>
                        ) : null}
                      </div>
                      <p className={styles.preferenceDescription}>{pref.description}</p>
                    </li>
                  ))}
                </ul>
              </fieldset>
              <div className={styles.formActions}>
                <button
                  type="submit"
                  className={`${controls.button} ${controls.buttonPrimary}`}
                  disabled={notificationStatus === 'saving'}
                >
                  {notificationStatus === 'saving' ? 'Saving...' : 'Save notification settings'}
                </button>
              </div>
              <p
                id="notification-status"
                role="status"
                aria-live="polite"
                className={styles.statusMessage}
              >
                {notificationStatus === 'success'
                  ? "Notification preferences saved. You'll only hear from us when it matters."
                  : null}
              </p>
            </form>
          </CardBody>
        </Card>

        <Card>
          <CardHeader title="Security" subtitle="Control sign-in protection and active sessions." />
          <CardBody>
            <section className={styles.securitySection} aria-label="Security controls">
              <ul className={styles.securityList}>
                {securityControls.map((control) => (
                  <li key={control.id} className={styles.securityItem}>
                    <div>
                      <h3 className={styles.securityLabel}>{control.label}</h3>
                      <p className={styles.securityDescription}>{control.description}</p>
                    </div>
                    <button
                      type="button"
                      role="switch"
                      aria-checked={control.enabled}
                      className={`${styles.switch} ${control.enabled ? styles.switchOn : styles.switchOff}`}
                      onClick={() => handleSecurityToggle(control.id)}
                    >
                      <span className={styles.switchThumb} />
                    </button>
                  </li>
                ))}
              </ul>
            </section>

            <section className={styles.securitySection} aria-label="Active sessions">
              <header className={styles.securitySubheader}>
                <h3>Active sessions</h3>
                <p>Sign out of devices you no longer recognize.</p>
              </header>
              <ul className={styles.sessionList}>
                {sessions.map((session) => (
                  <li key={session.id} className={styles.sessionItem}>
                    <div>
                      <span className={styles.sessionDevice}>{session.device}</span>
                      <span className={styles.sessionMeta}>
                        {session.location} - {session.lastActive}
                      </span>
                    </div>
                    {session.current ? (
                      <span className={styles.currentSession}>Current session</span>
                    ) : (
                      <button
                        type="button"
                        className={`${controls.button} ${styles.ghostButton}`}
                        onClick={() => handleSessionEnd(session.id)}
                      >
                        End session
                      </button>
                    )}
                  </li>
                ))}
              </ul>
              <div className={styles.formActions}>
                <button type="button" className={controls.button} onClick={handleResetBackupCodes}>
                  Reset backup codes
                </button>
              </div>
            </section>

            <p role="status" aria-live="polite" className={styles.statusMessage}>
              {securityStatus}
            </p>
          </CardBody>
        </Card>
      </div>

      <Card className={styles.dangerCard}>
        <CardHeader
          title="Account deletion"
          subtitle="This removes all linked institutions, transactions, and insights permanently."
          badge="Irreversible"
        />
        <CardBody>
          <form
            className={patterns.form}
            onSubmit={handleDeleteAccount}
            aria-describedby="delete-status"
          >
            <p className={styles.dangerCopy}>
              Deleting your account will purge historical transactions, budgets, automations, and AI
              conversation history. Export any records you need before continuing.
            </p>
            <label className={patterns.formLabel} htmlFor="delete-confirm">
              Type <span className={styles.code}>DELETE</span> to confirm
              <input
                id="delete-confirm"
                value={deletePhrase}
                onChange={handleDeleteInput}
                className={patterns.input}
                placeholder="DELETE"
                aria-required="true"
              />
            </label>
            <div className={styles.formActions}>
              <button
                type="submit"
                className={`${controls.button} ${controls.buttonDanger}`}
                disabled={
                  deletePhrase.trim().toUpperCase() !== 'DELETE' || deleteStatus === 'pending'
                }
              >
                {deleteStatus === 'pending' ? 'Processing...' : 'Delete account'}
              </button>
            </div>
            <p id="delete-status" role="status" aria-live="polite" className={styles.statusMessage}>
              {deleteStatus === 'success'
                ? "Your deletion request is queued. We'll email you within 24 hours to finalize the process."
                : null}
            </p>
          </form>
        </CardBody>
      </Card>
    </section>
  );
}
